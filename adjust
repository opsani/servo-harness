#!/usr/bin/env python3
import json
import math
import os
import requests
import sys
import time
import yaml

from adjust import Adjust, AdjustError

DESC = "Harness adjust driver for Opsani Optune"
VERSION = "0.0.1"
HAS_CANCEL = False

DEFAULTS = {
    'mem': {
        'min': 0.125, # GiB
        'max': 4, # GiB
        'step': 0.125 # GiB
    },
    'cpu': {
        'min': 0.125, # cores
        'max': 4, # cores
        'step': 0.125 # cores
    }
}
DEFAULT_ADJUST_TIMEOUT=3600

config_path = os.environ.get('OPTUNE_CONFIG', './config.yaml')

class HarnessDriver(Adjust):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if not (self.args.info or self.args.version):
            self.load_config()

    def load_config(self):
        try:
            with open(config_path) as in_file:
                c = yaml.safe_load(in_file)
        except yaml.YAMLError as e:
            raise Exception('Could not parse config file located at "{}". '
                            'Please check its contents. Error: {}'.format(config_path, str(e)))

        assert c and c.get('harness', None), 'Harness Servo Configuration was not provided in "{}". ' \
                                        'Please refer to README.md'.format(config_path)
        
        h = c['harness']
        assert h.get('account_id'), 'No account_id was included in harness configuration located at {}'.format(config_path)
        assert h.get('application'), 'No application was included in harness configuration located at {}'.format(config_path)
        assert h.get('api_key'), 'No api_key was included in harness configuration located at {}'.format(config_path)
        assert h.get('adjust_token'), 'No adjust_token was included in harness configuration located at {}'.format(config_path)
        # assert h.get('promote_token'), 'No promote_token was included in harness configuration located at {}'.format(config_path)
        assert h.get('opsani_account'), 'No opsani_account was included in harness configuration located at {}'.format(config_path)
        assert h.get('opsani_app_name'), 'No opsani_app_name was included in harness configuration located at {}'.format(config_path)
        assert h.get('opsani_token'), 'No opsani_token was included in harness configuration located at {}'.format(config_path)
        assert h.get('target_platform'), 'No target_platform was included in harness configuration located at {}'.format(config_path)
        assert h['target_platform'] in ['k8s', 'ecs'], 'Specified target_platform {} is not supported (in config located at{}). Supported values are "ecs" and "k8s"'\
            ''.format(h['target_platform'], config_path)

        bad_keys = h.get('settings', {}).keys() - {'cpu', 'mem'}
        assert len(bad_keys) < 1, "harness settings config (located at {}) was malformed, contained unknown setting key(s) {}".format(config_path, ', '.join(bad_keys))

        for k,v in h.get('settings', {}).items():
            bad_keys = v.keys() - {'min', 'max', 'step', 'default'}
            assert len(bad_keys) < 1, "range setting {} config was malformed, contained unknown key(s) {}".format(k, ', '.join(bad_keys))
            assert isinstance(v.get('min', DEFAULTS[k]['min']), (int, float)), 'range setting {} config was malformed; min must be a number. Found {}.'.format(k, v.get('min'))
            assert isinstance(v.get('max', DEFAULTS[k]['max']), (int, float)), 'range setting {} config was malformed; max must be a number. Found {}.'.format(k, v.get('max'))
            assert isinstance(v.get('step', DEFAULTS[k]['step']), (int, float)), 'range setting {} config was malformed; step must be a number. Found {}.'.format(k, v.get('step'))
            # TODO: require default for settings?
            assert isinstance(v.get('default', 0), (int, float)), 'range setting {} config was malformed; default must be a number. Found {}.'.format(k, v.get('default'))
                
            assert v.get('min', DEFAULTS[k]['min']) <= v.get('max', DEFAULTS[k]['max']), \
                'range setting {} config was malformed; supplied/default min ({}) is higher than supplied/default max ({})'\
                    ''.format(k, v.get('min', DEFAULTS[k]['min']), v.get('max', DEFAULTS[k]['max']))

            if v.get('min', DEFAULTS[k]['min']) != v.get('max', DEFAULTS[k]['max']):
                assert v.get('step', DEFAULTS[k]['step']) != 0, 'range setting {} config was malformed; step cannot be zero when min != max.'.format(k)
                assert v.get('step', DEFAULTS[k]['step']) > 0, 'range setting {} config was malformed; step must be a positive number.'.format(k)

                c = (v.get('max', DEFAULTS[k]['max']) - v.get('min', DEFAULTS[k]['min'])) / float(v.get('step', DEFAULTS[k]['step']))
                assert math.isclose(c, round(c, 0), abs_tol = 1/1024), 'range setting {} config was malformed; step value must allow to get from {} to {} in equal steps of {}.'\
                    ''.format(k, v.get('min', DEFAULTS[k]['min']), v.get('max', DEFAULTS[k]['max']), v.get('step', DEFAULTS[k]['step']))

        self.config = h

    def query(self):
        settings = {
            'cpu': {
                'type': 'range',
                'unit': 'cores' if self.config['target_platform'] == 'k8s' else 'vCPU',
                'min': self.config.get('settings', {}).get('cpu', {}).get('min', DEFAULTS['cpu']['min']),
                'max': self.config.get('settings', {}).get('cpu', {}).get('max', DEFAULTS['cpu']['max']),
                'step': self.config.get('settings', {}).get('cpu', {}).get('step', DEFAULTS['cpu']['step'])
            },
            'mem': {
                'type': 'range',
                'unit': 'GiB',
                'min': self.config.get('settings', {}).get('mem', {}).get('min', DEFAULTS['mem']['min']), 
                'max': self.config.get('settings', {}).get('mem', {}).get('max', DEFAULTS['mem']['max']), 
                'step': self.config.get('settings', {}).get('mem', {}).get('step', DEFAULTS['mem']['step'])
            }
        }

        url = "https://api.opsani.com/accounts/{}/applications/{}/config/".format(
            self.config['opsani_account'],
            self.config['opsani_app_name']
        )
        headers = {
            "Content-type": "application/merge-patch+json",
            "Authorization": "Bearer {}".format(self.config['opsani_token']),
        }
        response = requests.get(url, headers=headers)
        if not response.ok:
            raise AdjustError('Unable to query OCO config. Status code {}. Data {}'.format(response.status_code, response.text))

        opsani_config = response.json()
        userdata = opsani_config.get('adjustment', {}).get('control', {}).get('userdata')

        if userdata and userdata.get('cpu'):
            if self.config['target_platform'] == 'k8s':
                settings['cpu']['value'] = cpuunits(userdata['cpu'])
            elif self.config['target_platform'] == 'ecs':
                settings['cpu']['value'] = userdata['cpu'] / 1024 # convert aws cpu units to vCPU
        else:
            # TODO: require default in config validation or implement default values for setting defaults
            settings['cpu']['value'] = self.config.get('cpu', {}).get('default')
        
        if userdata and userdata.get('mem'):
            if self.config['target_platform'] == 'k8s':
                settings['mem']['value'] = memunits(userdata['mem'])
            elif self.config['target_platform'] == 'ecs':
                settings['mem']['value'] = userdata['mem'] / 1024 # convert MiB to GiB
        else:
            settings['mem']['value'] = self.config.get('mem', {}).get('default')

        return { 'application': { 'components': { 'canary': { 'settings': settings } } } }

    def adjust(self, data):
        # TODO: promote component
        canary_settings = data['application']['components'].get('canary', {}).get('settings')
        if not canary_settings:
            return # Nothing to adjust

        self.progress_message = 'Triggering canary worlfow'
        self.print_progress()

        if self.config['target_platform'] == 'k8s':
            cpu_val = canary_settings['cpu']['value']
            mem_val = '{}Gi'.format(canary_settings['mem']['value'])
        elif self.config['target_platform'] == 'ecs':
            cpu_val = canary_settings['cpu']['value'] * 1024 # convert vCPU to cpu units
            mem_val = canary_settings['mem']['value'] * 1024 # convert GiB to MiB

        trigger_headers = {"content-type": "application/json"}
        trigger_json_data = {
            "application": self.config["application"],
            "parameters": { "cpu": cpu_val, "mem": mem_val, 'adjust': 'True' }, # TODO: only set 'adjust' True on canary comp
        }
        trigger_params = { 'accountId': self.config['account_id'] }
        trigger_url = "https://app.harness.io/gateway/api/webhooks/{}".format(self.config['adjust_token'])

        response = requests.post(url=trigger_url, json=trigger_json_data, headers=trigger_headers, params=trigger_params)
        if not response.ok:
            raise AdjustError('Unable to trigger canary harness workflow. Status code {}. Data {}'.format(response.status_code, response.text))

        trigger_result = response.json()
        if not trigger_result.get('apiUrl'):
            raise AdjustError('Workflow trigger response contained no status url. Response: {}'.format(response.text))
        status_url = trigger_result["apiUrl"].replace("https://app.harness.io/api/","https://app.harness.io/gateway/api/")
        status_headers = {
            "X-API-KEY": self.config["api_key"],
            "content-type": "application/json",
        }

        self.progress_message = 'Waiting for workflow status SUCCESS'
        start_time = time.time()
        while True:
            status_response = requests.get(url=status_url, headers=status_headers)
            if not status_response.ok:
                raise AdjustError('Unable to get triggered workflow status. Status code {}. Data {}'.format(status_response.status_code, status_response.text))
            
            status_json = status_response.json()
            if status_json['status'] == 'SUCCESS':
                break
            if status_json['status'] == 'FAILED':
                raise AdjustError('Triggered workflow finished with FAILED status: {}'.format(status_json))
            # else: status == 'RUNNING'

            if time.time() - start_time > self.config.get('adjust_timeout', DEFAULT_ADJUST_TIMEOUT):
                raise AdjustError('Timed out waiting for completion of adjustment')

            time.sleep(30)

def cpuunits(s):
    '''convert a string for CPU resource (with optional unit suffix) into a number'''
    if s[-1] == "m": # there are no units other than 'm' (millicpu)
        return float(s[:-1])/1000.0
    return float(s)

# valid mem units: E, P, T, G, M, K, Ei, Pi, Ti, Gi, Mi, Ki
# nb: 'm' suffix found after setting 0.7Gi
mumap = {"E":1000**6,  "P":1000**5,  "T":1000**4,  "G":1000**3,  "M":1000**2,  "K":1000, "m":1000**-1,
         "Ei":1024**6, "Pi":1024**5, "Ti":1024**4, "Gi":1024**3, "Mi":1024**2, "Ki":1024}
Gi = 1024 * 1024 * 1024

def memunits(s):
    '''convert a string for memory resource (with optional unit suffix) into a number'''
    for u, m in mumap.items():
        if s.endswith(u):
            return (float(s[:-len(u)]) * m) / Gi
    return float(s) / Gi

if __name__ == '__main__':
    driver = HarnessDriver(cli_desc=DESC, supports_cancel=HAS_CANCEL, version=VERSION, progress_interval=30)
    driver.run()
